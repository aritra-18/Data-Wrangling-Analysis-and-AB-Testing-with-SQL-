-- Exercise 1
-- Here we use users table to pull a list of user email addresses 
-- Edit the query to pull the email addresses, but only for non-deleted users

SELECT 
  email_address
FROM
  dsv1069.users
WHERE 
  deleted_at IS NULL;
  
  
  -- Exercise 2
-- Use the items table to count the numbe of items for sale in each category

SELECT 
  category,
  COUNT(id) AS item_count
FROM 
  dsv1069.items
GROUP BY 
  category
ORDER BY 
  item_count ASC;
  
  
  -- Exercise 4
-- Select all of the columns fom the result when you JOIN the users table to the orders table

SELECT 
  *
FROM 
  dsv1069.users  AS users
JOIN 
  dsv1069.orders AS orders
ON 
  users.id = orders.user_id
ORDER BY 
  users.id ASC;
  
  
  -- Exercise 4
-- Count the number of viewed_item events

SELECT 
  COUNT(DISTINCT event_id) AS events
FROM 
  dsv1069.events
WHERE 
  event_name = 'view_item';
  
  
  -- Exercise 5
-- Compute the number of items in the items table which have been ordered
SELECT 
  COUNT(DISTINCT item_id) AS item_count
FROM 
  dsv1069.orders
  
  
  -- Exercise 6
-- For each user figure out IF a user has ordered something, and when their first purchase was

SELECT 
  users.id            AS user_id,
  MIN(orders.paid_at) AS min_paid_at
FROM 
  dsv1069.users  AS users
LEFT OUTER JOIN 
  dsv1069.orders AS orders
ON 
  users.id = orders.user_id
GROUP BY 
  users.id;


-- Figure out what percent of users have ever viewed the user profile page

SELECT 
  (CASE WHEN first_view IS NULL 
       THEN false
       ELSE true 
       END)         AS has_viewed_profile_page,
  COUNT(user_id)    AS users
FROM 
(
  SELECT 
    users.id        AS user_id,
    MIN(event_time) AS first_view
  FROM 
    dsv1069.users
  LEFT OUTER JOIN 
    dsv1069.events
  ON 
    events.user_id = users.id
  AND
    event_name = 'view_user_profile'
  GROUP BY
    users.id 
)                   AS first_profile_view
GROUP BY 
  has_viewed_profile_page;
